{"version":3,"file":"argsParser.js","names":["args","require","process","argv","log","console","info"],"sources":["../../src/utils/argsParser.js"],"sourcesContent":["const args = require(\"args-parser\")(process.argv);\n\nconst { log } = console;\n// args\n/**\n * -hr : heuristic\n * -algo : solving algorithm\n * -goal : goalpuzzle type\n * -gen generate puzzle\n * -i : iteration for the generation of puzzle\n * -g : greedy\n * -u : uniform\n * -o : output file\n *\n */\n\n \n    log(`\nWelcome to N-Puzzle solver:\nThe program tries to solve a puzzle of size 'n' with some options you give:\n\n-h,--heuristic    the heuristics you want to use in the solving process\n                  { manhattan - gaschnig - linearConflicts - euclidean - diagonal - hamming }\n                  default : manhattan\n                  \n-a, --algo        the algorithm to use to solve the puzzle\n                  - aStar, BFS, DFS IDFS\n                  default : aStar\n\n-goal             the type of goal puzzle you want to reach\n                    - snail (zero in center)\n                    - zf (zero first)\n                    - zl (zero last)\n                  default : snail\n\n-gen,--generate : generate a puzzle of size N you have to give\n                    - 3,4,5,6,7....\n                  default: NONE\n                  required: yes, if param mentioned\n\n-i                number of iterations to shuffle in case of puzzle generation\n                  default : 1000\n\n-g,--greedy       apply the greedy search in solving process (ignore the depth in tree score)\n                  default : false\n\n-u,--uniform      apply the uniform search in solving process (ignore the heuristic score)\n                  default : false\n\n-o,--output       the filename to output the solution and stats to.\n                  required: yes, if param mentioned\n`)\n\n\nconsole.info(args);\n"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACC,OAAO,CAACC,IAAI,CAAC;AAEjD,MAAM;EAAEC;AAAI,CAAC,GAAGC,OAAO;AAenBD,GAAG,CAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAGFC,OAAO,CAACC,IAAI,CAACN,IAAI,CAAC"}